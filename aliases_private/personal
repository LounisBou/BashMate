# Variables.
# Created by LounisBou
#
# PERSONNAL TOKENS : 
export OPENAI_API_KEY=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
#
# ACCESS PERSO  :
home_ip='85.168.244.130'
home_dns='home.iznogoudatall.xyz'
home_port_ssh='31522'
home_ssh_username='pi'
home_dir_disks_mount='/media/disks'
home_plex_remote_port='32400'

home_samba_username='guest'
home_samba_disks_mount='disks'

hodoor_local_ip='192.168.0.116'
hodoor_local_port_ssh='31422'
hodoor_ssh_username='pi'
hodoor_dir_disks_mount='/media/disks'

hodoor_samba_username='guest'
hodoor_samba_disks_mount='disks'

naspi_local_ip='192.168.0.106'
naspi_local_port_ssh='22'
naspi_ssh_username='pi'
naspi_dir_disks_mount='/media/disks'

naspi_samba_username='guest'
naspi_samba_disks_mount='disks'

pidom_local_ip='192.168.0.115'
pidom_local_port_ssh='22'
pidom_ssh_username='pi'

# LOCALHOST : 

localhost_ip='127.0.0.1'
localhost_dns='localhost'

localhost_dir_disks_mount='~/home/disks'

# DEFAULTS PORTS :

ssh_proxy_port='8090'
samba_local_port='1445'
samba_remote_port='445'
tor_local_port='9050'
plex_local_port='8080'
mysql_remote_port='3306'
mysql_local_port='3306'

# Aliases definitions.
# Created by LounisBou on 11/03/2021
#

# Allow sudo aliases access.
alias sd="sudo "

# ! BACKUP :

# Backup rpi over SSH
alias rpi-backup="piBackup"

# ! SSH

# SSH to Naspi
function sshNaspi(){ 
	ssh $naspi_ssh_username@$naspi_local_ip -p $naspi_local_port_ssh $*
}
# SSH to Home
function sshHome(){ 
	ssh $home_ssh_username@$home_dns -p $home_port_ssh $*
}
# SSH to Pidom
function sshPidom(){ 
	ssh $pidom_ssh_username@$pidom_local_ip -p $pidom_local_port_ssh$*
}

# ! TUNSSH

# TUNNEL SSH to Home
function tunsshHome(){ 
  tunssh -h $home_dns -u $home_ssh_username -p $home_port_ssh $*
}

# TUNNEL SSH to Home for Plex
function tunsshHomePlex(){ 
  tunssh -h $home_dns -u $home_ssh_username -p $home_port_ssh -rth $naspi_local_ip -rtp $home_plex_remote_port -ltp $plex_local_port
}

# ! SAMBA :

# Samba Naspi over Home.
function mountDisksFromHome(){
  # SSH tunnel to Naspi overs Home on Remote $samba_remote_port to local $samba_local_port
  tunssh -h $home_dns -u $home_ssh_username -p $home_port_ssh -ltp $samba_local_port -rth $naspi_local_ip -rtp $samba_remote_port
  # Création du dossier $localhost_dir_disks_mount pour l'utilisateur courant.
  mkdir -p $localhost_dir_disks_mount
  # Open samba share on $localhost_dns:$samba_local_port
  mount_smbfs //$home_samba_username@$localhost_dns:$samba_local_port/$home_samba_disks_mount $localhost_dir_disks_mount
  # Open $localhost_dir_disks_mount folder in Finder.
  open $localhost_dir_disks_mount
}
 
# Samba Naspi over Home.
function unmountDisksFromHome(){
  # Démontage du dossier home/disks de l'utilisateur courant.
  diskutil unmount ~/home/disks
  # Fermeture des tunnel SSH.
  tunssh --kill-all
}

# ! PLAY command over SSH :

# playssh command to Naspi
function playNaspi(){ 
	playssh -h $naspi_local_ip -u $naspi_ssh_username -p $naspi_local_port_ssh -c "'$*'"
}
# playssh command to Home
function playHome(){ 
	playssh -h $home_dns -u $home_ssh_username -p $home_port_ssh -c "'$*'"
}
# playssh command to Pidom
function playPidom(){ 
	playssh -h $pidom_local_ip -u $pidom_ssh_username -p $pidom_local_port_ssh -c "'$*'"
}
# ! SCP functions alias :

# get from Naspi
function getNaspi(){ 
	get -h $naspi_local_ip -u $naspi_ssh_username -p $naspi_local_port_ssh -rp $1 -lp $2
}
# get from Home
function getHome(){ 
	get -h $home_dns -u $home_ssh_username -p $home_port_ssh -rp $1 -lp $2
}
# get from Pidom
function getPidom(){ 
	get -h $pidom_local_ip -u $pidom_ssh_username -p $pidom_local_port_ssh -rp $1 -lp $2
}

# send to Naspi
function sendNaspi(){ 
	send -lp $1 -h $naspi_local_ip -u $naspi_ssh_username -p $naspi_local_port_ssh -rp $2
}
# send to Home
function sendHome(){ 
	send -lp $1 -h $home_dns -u $home_ssh_username -p $home_port_ssh -rp $2
}
# send to Pidom
function sendPidom(){ 
	send -lp $1 -h $pidom_local_ip -u $pidom_ssh_username -p $pidom_local_port_ssh -rp $2
}

# ! SSH Proxy

# proxyssh to Naspi
function proxyNaspi(){ 
	proxyssh -mp on -h $naspi_local_ip -u $naspi_ssh_username -p $naspi_local_port_ssh -pp $ssh_proxy_port $*
}
# proxyssh to Home
function proxyHome(){ 
	proxyssh -mp on -h $home_dns -u $home_ssh_username -p $home_port_ssh -pp $ssh_proxy_port $*
}
# proxyssh to Pidom
function proxyPidom(){ 
	proxyssh -mp on -h $pidom_local_ip -u $pidom_ssh_username -p $pidom_local_port_ssh -pp $ssh_proxy_port $*
}


# SSH Back Door

# backd to Naspi
function backdNaspi(){ 
	backd -h $naspi_local_ip -u $naspi_ssh_username -p $naspi_local_port_ssh $*
}
# backd to Home
function backdHome(){ 
	backd -h $home_dns -u $home_ssh_username -p $home_port_ssh $*
}
# backd to Pidom
function backdPidom(){ 
	backd -h $pidom_local_ip -u $pidom_ssh_username -p $pidom_local_port_ssh $*
}


# ! TheFuck

# Alias for TheFuck
eval $(thefuck --alias)

# The next line updates PATH for the Google Cloud SDK.
if [ -f '~/Documents/google-cloud-sdk/path.zsh.inc' ]; then . '~/Documents/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '~/Documents/google-cloud-sdk/completion.zsh.inc' ]; then . '~/Documents/google-cloud-sdk/completion.zsh.inc'; fi

# ! STT / TTS 

# listen : STT method
function listen(){ 
	python3 /var/scripts/stt.py
}

# say : TTS method
function say(){ 
	python3 /var/scripts/tts.py "$*"
}

# repeat : STT pipe TTS.
function nlu(){ 
  python3 /var/scripts/nlu.py "$*"
}

# listen-nlu : STT pipe NLU.
function listen-nlu(){ 
  listen > /tmp/text && nlu `cat /tmp/text`
}

# repeat : STT pipe TTS.
function re(){ 
  listen > /tmp/text && say `cat /tmp/text`
}

# ! SSH PASSWD

# sshpwd PASSWD 'ssh user@host CMD'
function sshpwd(){
  t=$(mktemp -u); mkfifo "$t" || return
  script /dev/null -qc "$2" <>"$t" | { dd count=1 2>/dev/null; echo "$1" >"$t"; rm "$t"; cat; }
}




