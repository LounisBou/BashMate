# Aliases for GIT.
# Created by LounisBou

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
ORANGE='\033[0;33m'
BLUE='\033[1;34m' # Light Blue
NC='\033[0m' # No Color

# Get git repository default branch
function gdefault-branch(){
    # Check if master branch exists
    if git show-ref --verify --quiet refs/heads/master; then
        # Set default branch to master
        default_branch="master"
    else
        # Set default branch to main
        default_branch="main"
    fi
    # Return default branch
    echo $default_branch
}

# Git create repo
function gcreate(){
    git init -b main
    git add .
    git commit -m "Initial commit"
}
function gcreate-remote(){
    # Create repo on github
    gh repo create $* --source=. --private --confirm --remote --push
}
# Git global
alias ga="git add $*"
alias gc="git commit -m $*"
alias gp="git push origin $*"
alias gpl="git pull"
alias gs="git status"
alias gcl="git clone $*"
# Git branch
alias gbr="git branch $*"
alias gbrd="git branch -d $*"
alias gbrD="git branch -D $*"
alias gbrm="git branch -m $*"
alias gbrM="git branch -M $*"
alias gbrv="git branch -v"
# Git log
function glg(){
    # Define variable nb_commits
    nb_commits=30
    # Check if $1 is not empty
    if [ ! -z "$1" ]
    then
        # Set $1 to nb_commits
        nb_commits=$1
    fi
    # Display git log
    git --no-pager log --graph --oneline --decorate --all -n $nb_commits
}
function gllc(){
    # Define variable nb_commits
    nb_commits=1
    # Check if $1 is not empty
    if [ ! -z "$1" ]
    then
        # Set $1 to nb_commits
        nb_commits=$1
    fi
    # Display git log
    git --no-pager log -$nb_commits
}
alias gdf="git diff"
# Git flow
alias gfi="git flow init"
alias gfs="git flow feature start $*"
alias gff="git flow feature finish $*"
function grs(){
    # Call git update
    git-update
    # Create release branch
    git flow release start $*
}
function grf(){
    # Get current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Check if current branch is a release branch
    if [[ $current_branch == release/* ]]
    then
        # Get release version
        release_version=$(echo $current_branch | cut -d '/' -f2)
        echo -e "${YELLOW}Finish release version: $release_version ${NC}"
        # Finish release
        git flow release finish $release_version
        # Push tags
        git push origin --tags
        # Message user to call git after mep
        echo -e "${ORANGE}WARNING : You should call method 'git-after-mep' to update (master|main)/develop/preprod branch ${NC}"
        # Ask user if he wants to call git after mep
        read REPLY"?Do you want to call method 'git-after-mep' ? (y/n) "
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            # Call git after mep
            git-after-mep
        fi
    else
        # Message error current branch is not a release branch
        echo -e "${RED}Error: Current branch is not a release branch ${NC}"
    fi
}
function ghs(){
    # Call git update
    git-update
    # Create hotfix branch
    git flow hotfix start $*
}
function ghf(){
    # Get current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Check if current branch is a hotfix branch
    if [[ $current_branch == hotfix/* ]]
    then
        # Get hotfix version
        hotfix_version=$(echo $current_branch | cut -d '/' -f2)
        echo "Finish hotfix version: $hotfix_version"
        # Finish hotfix
        git flow hotfix finish $hotfix_version
        # Push tags
        git push origin --tags
        # Message user to call git after mep
        echo -e "${ORANGE}WARNING : You should call method 'git-after-mep' to update master/develop/preprod branch ${NC}"
        # Ask user if he wants to call git after mep
        read REPLY"?Do you want to call method 'git-after-mep' ? (y/n) "
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            # Call git after mep
            git-after-mep
        fi
    else
        # Message error current branch is not a hotfix branch
        echo -e "${RED}Error: Current branch is not a hotfix branch${NC}"
    fi
}
function gbs(){
    # Call git update
    git-update
    # Create bugfix branch
    git flow bugfix start $*
}
function gbf(){
    # Get current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Check if current branch is a bugfix branch
    if [[ $current_branch == bugfix/* ]]
    then
        # Get bugfix version
        bugfix_version=$(echo $current_branch | cut -d '/' -f2)
        echo "Finish bugfix version: $bugfix_version"
        # Finish bugfix
        git flow bugfix finish $bugfix_version
        # Push tags
        git push origin --tags
        # Message user to call git after mep
        echo -e "${ORANGE}WARNING : You should call method 'git-after-mep' to update (master|main)/develop/preprod branch ${NC}"
    else
        # Message error current branch is not a bugfix branch
        echo -e "${RED}Error: Current branch is not a bugfix branch${NC}"
    fi
}
# Checkout
alias gco="git checkout $*"
function gcft(){
    # Checkout feature branch
    git checkout feature/task/$*
}
function gcf(){
    # Checkout feature branch
    git checkout feature/$*
}
function gcr(){
    # Checkout release branch
    git checkout release/$*
}
function gch(){
    # Checkout hotfix branch
    git checkout hotfix/$*
}
function gcb(){
    # Checkout bugfix branch
    git checkout bugfix/$*
}
alias gcd="git checkout develop"
alias gcm="git checkout $(gdefault-branch)"
alias gct="git checkout tests"
alias gcp="git checkout prod"
alias gcpp="git checkout preprod"
# Stash
alias gst="git stash"
alias gstl="git stash list"
alias gstp="git stash pop"
alias gstc="git stash clear"
# Merge
function gmf(){
    # Get current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Checkout on feature branch
    git checkout feature/$*
    # Update feature branch
    git pull
    # Checkout on current branch
    git checkout $current_branch
    # Merge feature branch
    git merge feature/$* -m "Merge feature/$* in $current_branch"
}
function gmft(){
    # Get current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Checkout on feature/task branch
    git checkout feature/task/$*
    # Update feature/task branch
    git pull
    # Checkout on current branch
    git checkout $current_branch
    # Merge feature task branch
    git merge feature/task/$* -m "Merge feature/task/$* in $current_branch"
}
function gmergin(){
    # Retrieve current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Go to $1 branch
    git checkout $1
    # Merge current branch in $1 branch
    git merge $current_branch -m "Merge $current_branch in $1"
    # git add all
    git add .
    # git commit
    git commit -m "Merge $current_branch in $1"
    # Go back to current branch
    git checkout $current_branch
}
gmt="git mergetool"
# Get laster tag for branch
function gtag(){
    # Check if $1 is not empty
    if [ -z "$1" ]
    then
        # Set default branch name
        branch_name="$(gdefault-branch)"
    else
        # Set branch name
        branch_name=$1
    fi
    # Get last tag for current branch
    last_tag=$(git describe --tags `git rev-list --tags --max-count=1 $branch_name`)
    # Display last tag
    echo -e "${GREEN}Last tag for $branch_name branch is : $last_tag ${NC}"
}
# Push tag 
function gpt(){
    # Push all local tags
    git push origin --tags
    # Message user to call git after mep
    echo -e "${ORANGE}WARNING : You should call method 'git-after-mep' to update $(gdefault-branch)/develop/preprod branch ${NC}"
}
# Update (master|main)/develop/preprod branch
function git-update(){
    # Retrieve current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Fetch all branches
    git fetch --all
    # List of branches to update
    branches=("develop" "$(gdefault-branch)" "preprod")
    # Loop on branches
    for branch in "${branches[@]}"
    do
        # Checkout branch
        git checkout $branch
        # Pull branch
        git pull
        # Apply migration
        php artisan migrate
    done
    # Checkout current branch
    git checkout $current_branch
    # Pull current branch
    git pull
    # Apply migration
    php artisan migrate
}
# Update current branch by merging develop branch on it
function git-update-branch(){
    # Retrieve current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Checkout develop branch
    git checkout develop
    # Pull develop branch
    git pull
    # Checkout current branch
    git checkout $current_branch
    # Pull current branch
    git pull
    # Merge develop branch on current branch
    git merge develop
    # Check if there is a conflict
    git diff --check
    # Ask user if he wants to continue
    read REPLY"?Do you want to continue ? (y/n) "
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Commit merge
        git commit -m "Merge develop in $current_branch"
        # Push current branch
        git push
    fi
    # Apply migration
    php artisan migrate
    
}
# After MEP
function git-after-mep(){
    # Retrieve current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Checkout develop branch
    git checkout develop
    # Push develop branch
    git push
    # Checkout (master|main) branch
    git checkout $(gdefault-branch)
    # Push (master|main) branch
    git push
    # Checkout current branch
    git checkout $current_branch
    # Push current branch
    git push
}
# Push current branch on preprod
function gpush-on-preprod(){
    # Retrieve current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    # Add all files to commit
    ga .
    # Check if there is a commit message
    if [ -z "$1" ]
    then
        # Set default commit message
        commit_message="Push $current_branch on preprod"
    else
        # Set commit message
        commit_message=$1
    fi
    # Commit with message
    gc $commit_message
    # Push current branch
    gp $current_branch
    # Merge current branch in preprod
    gmergin preprod
    # Update (master|main)/develop/preprod branch
    git-update
    # Push preprod branch
    gp preprod
}
# Manage merge conflicts
function git-conflicts(){
    # Retrieve current branch name
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    
}

# Git rollback 1 commit
function git-rollback(){
    # Check if $1 is not empty
    if [ -z "$1" ]
    then
        # Set default number of commits
        nb_commits=1
    else
        # Set number of commits
        nb_commits=$1
    fi
    # Rollback last commit
    git reset --hard HEAD~$nb_commits
}

# Infos
alias ginfo="git config --list"